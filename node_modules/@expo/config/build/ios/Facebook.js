"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Scheme_1 = require("./Scheme");
/**
 * Getters
 * TODO: these getters are the same between ios/android, we could reuse them
 */
function getFacebookScheme(config) {
    var _a;
    return (_a = config.facebookScheme) !== null && _a !== void 0 ? _a : null;
}
exports.getFacebookScheme = getFacebookScheme;
function getFacebookAppId(config) {
    var _a;
    return (_a = config.facebookAppId) !== null && _a !== void 0 ? _a : null;
}
exports.getFacebookAppId = getFacebookAppId;
function getFacebookDisplayName(config) {
    var _a;
    return (_a = config.facebookDisplayName) !== null && _a !== void 0 ? _a : null;
}
exports.getFacebookDisplayName = getFacebookDisplayName;
function getFacebookAutoInitEnabled(config) {
    return config.hasOwnProperty('facebookAutoInitEnabled') ? config.facebookAutoInitEnabled : null;
}
exports.getFacebookAutoInitEnabled = getFacebookAutoInitEnabled;
function getFacebookAutoLogAppEvents(config) {
    return config.hasOwnProperty('facebookAutoLogAppEventsEnabled')
        ? config.facebookAutoLogAppEventsEnabled
        : null;
}
exports.getFacebookAutoLogAppEvents = getFacebookAutoLogAppEvents;
function getFacebookAdvertiserIDCollection(config) {
    return config.hasOwnProperty('facebookAdvertiserIDCollectionEnabled')
        ? config.facebookAdvertiserIDCollectionEnabled
        : null;
}
exports.getFacebookAdvertiserIDCollection = getFacebookAdvertiserIDCollection;
/**
 * Setters
 */
function setFacebookConfig(config, infoPlist) {
    infoPlist = setFacebookAppId(config, infoPlist);
    infoPlist = setFacebookApplicationQuerySchemes(config, infoPlist);
    infoPlist = setFacebookDisplayName(config, infoPlist);
    infoPlist = setFacebookAutoInitEnabled(config, infoPlist);
    infoPlist = setFacebookAutoLogAppEventsEnabled(config, infoPlist);
    infoPlist = setFacebookAdvertiserIDCollectionEnabled(config, infoPlist);
    infoPlist = setFacebookScheme(config, infoPlist);
    return infoPlist;
}
exports.setFacebookConfig = setFacebookConfig;
function setFacebookScheme(config, infoPlist) {
    const facebookScheme = getFacebookScheme(config);
    return Scheme_1.appendScheme(facebookScheme, infoPlist);
}
exports.setFacebookScheme = setFacebookScheme;
function setFacebookAutoInitEnabled(config, infoPlist) {
    const facebookAutoInitEnabled = getFacebookAutoInitEnabled(config);
    if (facebookAutoInitEnabled === null) {
        return infoPlist;
    }
    return Object.assign(Object.assign({}, infoPlist), { FacebookAutoInitEnabled: facebookAutoInitEnabled });
}
exports.setFacebookAutoInitEnabled = setFacebookAutoInitEnabled;
function setFacebookAutoLogAppEventsEnabled(config, infoPlist) {
    const facebookAutoLogAppEventsEnabled = getFacebookAutoLogAppEvents(config);
    if (facebookAutoLogAppEventsEnabled === null) {
        return infoPlist;
    }
    return Object.assign(Object.assign({}, infoPlist), { FacebookAutoLogAppEventsEnabled: facebookAutoLogAppEventsEnabled });
}
exports.setFacebookAutoLogAppEventsEnabled = setFacebookAutoLogAppEventsEnabled;
function setFacebookAdvertiserIDCollectionEnabled(config, infoPlist) {
    const facebookAdvertiserIDCollectionEnabled = getFacebookAdvertiserIDCollection(config);
    if (facebookAdvertiserIDCollectionEnabled === null) {
        return infoPlist;
    }
    return Object.assign(Object.assign({}, infoPlist), { FacebookAdvertiserIDCollectionEnabled: facebookAdvertiserIDCollectionEnabled });
}
exports.setFacebookAdvertiserIDCollectionEnabled = setFacebookAdvertiserIDCollectionEnabled;
function setFacebookAppId(config, infoPlist) {
    const facebookAppId = getFacebookAppId(config);
    if (facebookAppId) {
        return Object.assign(Object.assign({}, infoPlist), { FacebookAppID: facebookAppId });
    }
    return infoPlist;
}
exports.setFacebookAppId = setFacebookAppId;
function setFacebookDisplayName(config, infoPlist) {
    const facebookDisplayName = getFacebookDisplayName(config);
    if (facebookDisplayName) {
        return Object.assign(Object.assign({}, infoPlist), { FacebookDisplayName: facebookDisplayName });
    }
    return infoPlist;
}
exports.setFacebookDisplayName = setFacebookDisplayName;
function setFacebookApplicationQuerySchemes(config, infoPlist) {
    const facebookAppId = getFacebookAppId(config);
    if (!facebookAppId) {
        return infoPlist;
    }
    const existingSchemes = infoPlist.LSApplicationQueriesSchemes || [];
    // already inlcuded, no need to add again
    if (existingSchemes.includes('fbapi')) {
        return infoPlist;
    }
    // TODO: it's actually necessary to add more query schemes (specific to the
    // app) to support all of the features that the Facebook SDK provides, should
    // we sync those here too?
    const updatedSchemes = [
        ...existingSchemes,
        'fbapi',
        'fb-messenger-api',
        'fbauth2',
        'fbshareextension',
    ];
    return Object.assign(Object.assign({}, infoPlist), { LSApplicationQueriesSchemes: updatedSchemes });
}
exports.setFacebookApplicationQuerySchemes = setFacebookApplicationQuerySchemes;
//# sourceMappingURL=Facebook.js.map