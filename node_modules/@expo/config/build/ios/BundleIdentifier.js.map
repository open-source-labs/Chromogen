{"version":3,"file":"BundleIdentifier.js","sourceRoot":"","sources":["../../src/ios/BundleIdentifier.ts"],"names":[],"mappings":"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","sourcesContent":["import plist, { PlistObject } from '@expo/plist';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\n// @ts-ignore\nimport { project as Project } from 'xcode';\n\nimport { ExpoConfig } from '../Config.types';\nimport { InfoPlist } from './IosConfig.types';\nimport {\n  ConfigurationSectionEntry,\n  Pbxproj,\n  getXCBuildConfigurationSection,\n  getXCConfigurationLists,\n  isBuildConfig,\n  isNotComment,\n  isNotTestHost,\n} from './utils/Xcodeproj';\n\nfunction getBundleIdentifier(config: ExpoConfig): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier of the Xcode project found in the project directory.\n * If either the Xcode project doesn't exist or the project is not configured\n * this function returns null.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(projectRoot: string): string | null {\n  // TODO(dsokal):\n  // I'm not sure if it's either possible or common that an iOS project has multiple project.pbxproj files.\n  // For now, I'm assuming that the glob returns at last one file.\n  const pbxprojPaths = globSync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });\n  const pbxprojPath = pbxprojPaths.length > 0 ? pbxprojPaths[0] : undefined;\n  if (!pbxprojPath) {\n    return null;\n  }\n  const project = Project(pbxprojPath);\n  project.parseSync();\n  for (const [, item] of getBuildConfigurationSectionEntires(project)) {\n    const bundleIdentifier = item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n    if (bundleIdentifier) {\n      return bundleIdentifier[0] === '\"' ? bundleIdentifier.slice(1, -1) : bundleIdentifier;\n    }\n  }\n  return null;\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = Project(pbxprojPath);\n  project.parseSync();\n  getBuildConfigurationSectionEntires(project).forEach(([, item]: ConfigurationSectionEntry) => {\n    if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n      return;\n    }\n\n    item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n    if (updateProductName) {\n      const productName = bundleIdentifier.split('.').pop();\n      if (!productName?.includes('$')) {\n        item.buildSettings.PRODUCT_NAME = productName;\n      }\n    }\n  });\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\nfunction getBuildConfigurationSectionEntires(project: Pbxproj): ConfigurationSectionEntry[] {\n  const configurationLists = getXCConfigurationLists(project);\n  const buildConfigurations = configurationLists[0].buildConfigurations.map(i => i.value);\n\n  return Object.entries(getXCBuildConfigurationSection(project))\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(isNotTestHost)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  const pbxprojPaths = globSync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = globSync('ios/*/Info.plist', { absolute: true, cwd: projectRoot });\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"]}