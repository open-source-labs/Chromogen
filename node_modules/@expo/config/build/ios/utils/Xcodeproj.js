"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const glob_1 = require("glob");
const path_1 = __importDefault(require("path"));
// @ts-ignore
const xcode_1 = require("xcode");
// @ts-ignore
const pbxFile_1 = __importDefault(require("xcode/lib/pbxFile"));
function getProjectName(projectRoot) {
    const sourceRoot = getSourceRoot(projectRoot);
    return path_1.default.basename(sourceRoot);
}
exports.getProjectName = getProjectName;
function getSourceRoot(projectRoot) {
    const paths = glob_1.sync('ios/*/AppDelegate.m', {
        absolute: true,
        cwd: projectRoot,
    });
    return path_1.default.dirname(paths[0]);
}
exports.getSourceRoot = getSourceRoot;
// TODO(brentvatne): I couldn't figure out how to do this with an existing
// higher level function exposed by the xcode library, but we should find out how to do
// that and replace this with it
function addFileToGroup(filepath, groupName, project) {
    const file = new pbxFile_1.default(filepath);
    file.uuid = project.generateUuid();
    file.fileRef = project.generateUuid();
    project.addToPbxFileReferenceSection(file);
    project.addToPbxBuildFileSection(file);
    project.addToPbxSourcesBuildPhase(file);
    const group = project.pbxGroupByName(groupName);
    if (!group) {
        throw Error(`Group by name ${groupName} not found!`);
    }
    group.children.push({ value: file.fileRef, comment: file.basename });
    return project;
}
exports.addFileToGroup = addFileToGroup;
/**
 * Get the pbxproj for the given path
 */
function getPbxproj(projectRoot) {
    const pbxprojPaths = glob_1.sync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });
    const [pbxprojPath, ...otherPbxprojPaths] = pbxprojPaths;
    if (pbxprojPaths.length > 1) {
        console.warn(`Found multiple pbxproject files paths, using ${pbxprojPath}. Other paths ${JSON.stringify(otherPbxprojPaths)} ignored.`);
    }
    const project = xcode_1.project(pbxprojPath);
    project.parseSync();
    return project;
}
exports.getPbxproj = getPbxproj;
function getProjectSection(project) {
    return project.pbxProjectSection();
}
exports.getProjectSection = getProjectSection;
function getXCConfigurationLists(project) {
    const lists = project.pbxXCConfigurationList();
    return Object.entries(lists)
        .filter(isNotComment)
        .map(([, value]) => value);
}
exports.getXCConfigurationLists = getXCConfigurationLists;
function getXCBuildConfigurationSection(project) {
    return project.pbxXCBuildConfigurationSection();
}
exports.getXCBuildConfigurationSection = getXCBuildConfigurationSection;
function isBuildConfig([, sectionItem]) {
    return sectionItem.isa === 'XCBuildConfiguration';
}
exports.isBuildConfig = isBuildConfig;
function isNotTestHost([, sectionItem]) {
    return !sectionItem.buildSettings.TEST_HOST;
}
exports.isNotTestHost = isNotTestHost;
function isNotComment([key]) {
    return !key.endsWith(`_comment`);
}
exports.isNotComment = isNotComment;
//# sourceMappingURL=Xcodeproj.js.map