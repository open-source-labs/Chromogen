{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../../src/ios/Updates.ts"],"names":[],"mappings":";;AAGA,SAAgB,YAAY,CAAC,MAAkB,EAAE,QAAuB;IACtE,MAAM,IAAI,GAAG,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;IACxE,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IACD,OAAO,qBAAqB,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;AACpD,CAAC;AAND,oCAMC;AAED,SAAgB,aAAa,CAAC,MAAkB;IAC9C,OAAO,OAAO,MAAM,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1E,CAAC;AAFD,sCAEC;AAED,SAAgB,iBAAiB,CAAC,MAAkB;;IAClD,OAAO,OAAA,MAAM,CAAC,OAAO,0CAAE,OAAO,MAAK,KAAK,CAAC;AAC3C,CAAC;AAFD,8CAEC;AAED,SAAgB,iBAAiB,CAAC,MAAkB;;IAClD,mBAAO,MAAM,CAAC,OAAO,0CAAE,sBAAsB,mCAAI,CAAC,CAAC;AACrD,CAAC;AAFD,8CAEC;AAED,SAAgB,uBAAuB,CAAC,MAAkB;;IACxD,IAAI,OAAA,MAAM,CAAC,OAAO,0CAAE,kBAAkB,MAAK,mBAAmB,EAAE;QAC9D,OAAO,OAAO,CAAC;KAChB;SAAM,IAAI,OAAA,MAAM,CAAC,OAAO,0CAAE,kBAAkB,MAAK,SAAS,EAAE;QAC3D,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAPD,0DAOC;AAED,SAAgB,gBAAgB,CAC9B,MAAkB,EAClB,SAAoB,EACpB,QAAuB;IAEvB,IAAI,YAAY,mCACX,SAAS,KACZ,gBAAgB,EAAE,iBAAiB,CAAC,MAAM,CAAC,EAC3C,YAAY,EAAE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,EAC5C,sBAAsB,EAAE,uBAAuB,CAAC,MAAM,CAAC,EACvD,qBAAqB,EAAE,iBAAiB,CAAC,MAAM,CAAC,GACjD,CAAC;IAEF,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACjD,IAAI,SAAS,EAAE;QACb,YAAY,mCACP,YAAY,KACf,YAAY,EAAE,SAAS,GACxB,CAAC;KACH;IAED,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACzC,IAAI,UAAU,EAAE;QACd,YAAY,mCACP,YAAY,KACf,mBAAmB,EAAE,UAAU,GAChC,CAAC;KACH;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AA9BD,4CA8BC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { ExpoPlist } from './IosConfig.types';\n\nexport function getUpdateUrl(config: ExpoConfig, username: string | null) {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getSDKVersion(config: ExpoConfig) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: ExpoConfig) {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: ExpoConfig) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(config: ExpoConfig) {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function setUpdatesConfig(\n  config: ExpoConfig,\n  expoPlist: ExpoPlist,\n  username: string | null\n) {\n  let newExpoPlist = {\n    ...expoPlist,\n    EXUpdatesEnabled: getUpdatesEnabled(config),\n    EXUpdatesURL: getUpdateUrl(config, username),\n    EXUpdatesCheckOnLaunch: getUpdatesCheckOnLaunch(config),\n    EXUpdatesLaunchWaitMs: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist = {\n      ...newExpoPlist,\n      EXUpdatesURL: updateUrl,\n    };\n  }\n\n  const sdkVersion = getSDKVersion(config);\n  if (sdkVersion) {\n    newExpoPlist = {\n      ...newExpoPlist,\n      EXUpdatesSDKVersion: sdkVersion,\n    };\n  }\n\n  return newExpoPlist;\n}\n"]}