{"version":3,"file":"read-config.js","sourceRoot":"","sources":["../../src/scripts/read-config.ts"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;AAEb,gDAAwB;AAGxB,sCAAqD;AACrD,4CAAoD;AAEpD,qEAAqE;AACrE,6EAA6E;AAC7E,2DAA2D;AAC3D,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,GAAG,CAAC,EAAE;IACrC,MAAM,GAAG,CAAC;AACZ,CAAC,CAAC,CAAC;AAEH,MAAM,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;AAEzD,IAAI,OAAO,GAAyB,IAAI,CAAC;AAEzC,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;IAClC,IAAI;QACF,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAkB,CAAC;KACnD;IAAC,OAAO,CAAC,EAAE,GAAE;CACf;AAED,IAAI;IACF,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAE/C,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACzB,IAAI,EAAE,CAAC,UAAU,CAAC;QAClB,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;QAC1B,OAAO,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;KACrD,CAAC,CAAC;IAEH,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IACjC,IAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;QAC1B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;KACzB;IACD,MAAM,kBAAkB,GAAG,OAAO,MAAM,CAAC;IACzC,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;KAC1B;IAED,IAAI,MAAM,YAAY,OAAO,EAAE;QAC7B,MAAM,IAAI,oBAAW,CAAC,eAAe,UAAU,2BAA2B,EAAE,gBAAgB,CAAC,CAAC;KAC/F;IAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,gCAAoB,CAAC,MAAM,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC1F,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAAC,OAAO,KAAK,EAAE;IACd,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CAClB","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nimport path from 'path';\n\nimport { ConfigContext } from '../Config.types';\nimport { ConfigError, errorToJSON } from '../Errors';\nimport { serializeAndEvaluate } from '../Serialize';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\nconst { 3: configFileArg, 4: requestArg } = process.argv;\n\nlet request: ConfigContext | null = null;\n\nif (typeof requestArg === 'string') {\n  try {\n    request = JSON.parse(requestArg) as ConfigContext;\n  } catch (_) {}\n}\n\ntry {\n  const configFile = path.resolve(configFileArg);\n\n  require('@babel/register')({\n    only: [configFile],\n    extensions: ['.ts', '.js'],\n    presets: [require.resolve('@expo/babel-preset-cli')],\n  });\n\n  let result = require(configFile);\n  if (result.default != null) {\n    result = result.default;\n  }\n  const exportedObjectType = typeof result;\n  if (typeof result === 'function') {\n    result = result(request);\n  }\n\n  if (result instanceof Promise) {\n    throw new ConfigError(`Config file ${configFile} cannot return a Promise.`, 'INVALID_CONFIG');\n  }\n\n  console.log(JSON.stringify({ config: serializeAndEvaluate(result), exportedObjectType }));\n  process.exit(0);\n} catch (error) {\n  console.error(JSON.stringify(errorToJSON(error)));\n  process.exit(-1);\n}\n"]}