"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Colors_1 = require("./Colors");
const Styles_1 = require("./Styles");
const COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';
const WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';
const WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';
function getStatusBarColor(config) {
    var _a;
    return ((_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.backgroundColor) || 'translucent';
}
exports.getStatusBarColor = getStatusBarColor;
function getStatusBarStyle(config) {
    var _a;
    return ((_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.barStyle) || 'light-content';
}
exports.getStatusBarStyle = getStatusBarStyle;
async function setStatusBarConfig(config, projectDirectory) {
    const hexString = getStatusBarColor(config);
    const statusBarStyle = getStatusBarStyle(config);
    const stylesPath = await Styles_1.getProjectStylesXMLPathAsync(projectDirectory);
    const colorsPath = await Colors_1.getProjectColorsXMLPathAsync(projectDirectory);
    if (!colorsPath || !stylesPath) {
        return false;
    }
    let stylesJSON = await Styles_1.readStylesXMLAsync(stylesPath);
    let colorsJSON = await Colors_1.readColorsXMLAsync(colorsPath);
    const styleItemToAdd = [{ _: '', $: { name: '' } }];
    if (hexString === 'translucent') {
        // translucent status bar set in theme
        styleItemToAdd[0]._ = 'true';
        styleItemToAdd[0].$.name = WINDOW_TRANSLUCENT_STATUS;
    }
    else {
        // Need to add a color key to colors.xml to use in styles.xml
        const colorItemToAdd = [{ _: hexString, $: { name: COLOR_PRIMARY_DARK_KEY } }];
        colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);
        styleItemToAdd[0]._ = `@color/${COLOR_PRIMARY_DARK_KEY}`;
        styleItemToAdd[0].$.name = COLOR_PRIMARY_DARK_KEY;
    }
    // Default is light-content, don't need to do anything to set it
    if (statusBarStyle === 'dark-content') {
        const statusBarStyleItem = [{ _: 'true', $: { name: WINDOW_LIGHT_STATUS_BAR } }];
        stylesJSON = Styles_1.setStylesItem(statusBarStyleItem, stylesJSON);
    }
    stylesJSON = Styles_1.setStylesItem(styleItemToAdd, stylesJSON);
    try {
        await Colors_1.writeColorsXMLAsync(colorsPath, colorsJSON);
        await Styles_1.writeStylesXMLAsync(stylesPath, stylesJSON);
    }
    catch (e) {
        throw new Error(`Error setting Android status bar config. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`);
    }
    return true;
}
exports.setStatusBarConfig = setStatusBarConfig;
//# sourceMappingURL=StatusBar.js.map