"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Colors_1 = require("./Colors");
const Styles_1 = require("./Styles");
const COLOR_PRIMARY_KEY = 'colorPrimary';
const DEFAULT_PRIMARY_COLOR = '#023c69';
function getPrimaryColor(config) {
    var _a;
    return (_a = config.primaryColor) !== null && _a !== void 0 ? _a : DEFAULT_PRIMARY_COLOR;
}
exports.getPrimaryColor = getPrimaryColor;
async function setPrimaryColor(config, projectDirectory) {
    const hexString = getPrimaryColor(config);
    const stylesPath = await Styles_1.getProjectStylesXMLPathAsync(projectDirectory);
    const colorsPath = await Colors_1.getProjectColorsXMLPathAsync(projectDirectory);
    if (!colorsPath || !stylesPath) {
        return false;
    }
    let stylesJSON = await Styles_1.readStylesXMLAsync(stylesPath);
    let colorsJSON = await Colors_1.readColorsXMLAsync(colorsPath);
    const colorItemToAdd = [{ _: '', $: { name: '' } }];
    const styleItemToAdd = [{ _: '', $: { name: '' } }];
    colorItemToAdd[0]._ = hexString;
    colorItemToAdd[0].$.name = COLOR_PRIMARY_KEY;
    styleItemToAdd[0]._ = `@color/${COLOR_PRIMARY_KEY}`;
    styleItemToAdd[0].$.name = COLOR_PRIMARY_KEY;
    colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);
    stylesJSON = Styles_1.setStylesItem(styleItemToAdd, stylesJSON);
    try {
        await Colors_1.writeColorsXMLAsync(colorsPath, colorsJSON);
        await Styles_1.writeStylesXMLAsync(stylesPath, stylesJSON);
    }
    catch (e) {
        throw new Error(`Error setting Android primary color. Cannot write new styles.xml to ${stylesPath}.`);
    }
    return true;
}
exports.setPrimaryColor = setPrimaryColor;
//# sourceMappingURL=PrimaryColor.js.map