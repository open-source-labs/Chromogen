"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Colors_1 = require("./Colors");
const Styles_1 = require("./Styles");
const ANDROID_WINDOW_BACKGROUND = 'android:windowBackground';
const WINDOW_BACKGROUND_COLOR = 'activityBackground';
function getRootViewBackgroundColor(config) {
    if (config.android && config.android.backgroundColor) {
        return config.android.backgroundColor;
    }
    if (config.backgroundColor) {
        return config.backgroundColor;
    }
    return null;
}
exports.getRootViewBackgroundColor = getRootViewBackgroundColor;
async function setRootViewBackgroundColor(config, projectDirectory) {
    const hexString = getRootViewBackgroundColor(config);
    if (!hexString) {
        return false;
    }
    const stylesPath = await Styles_1.getProjectStylesXMLPathAsync(projectDirectory);
    const colorsPath = await Colors_1.getProjectColorsXMLPathAsync(projectDirectory);
    if (!colorsPath || !stylesPath) {
        return false;
    }
    let stylesJSON = await Styles_1.readStylesXMLAsync(stylesPath);
    let colorsJSON = await Colors_1.readColorsXMLAsync(colorsPath);
    const colorItemToAdd = [{ _: '', $: { name: '' } }];
    const styleItemToAdd = [{ _: '', $: { name: '' } }];
    colorItemToAdd[0]._ = hexString;
    colorItemToAdd[0].$.name = WINDOW_BACKGROUND_COLOR;
    styleItemToAdd[0]._ = `@color/${WINDOW_BACKGROUND_COLOR}`;
    styleItemToAdd[0].$.name = ANDROID_WINDOW_BACKGROUND;
    colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);
    stylesJSON = Styles_1.setStylesItem(styleItemToAdd, stylesJSON);
    try {
        await Colors_1.writeColorsXMLAsync(colorsPath, colorsJSON);
        await Styles_1.writeStylesXMLAsync(stylesPath, stylesJSON);
    }
    catch (e) {
        throw new Error(`Error setting Android root view background color. Cannot write new styles.xml to ${stylesPath}.`);
    }
    return true;
}
exports.setRootViewBackgroundColor = setRootViewBackgroundColor;
//# sourceMappingURL=RootViewBackgroundColor.js.map