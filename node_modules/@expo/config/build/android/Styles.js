"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const xml2js_1 = require("xml2js");
async function getProjectStylesXMLPathAsync(projectDir) {
    try {
        const shellPath = path_1.default.join(projectDir, 'android');
        if ((await fs_extra_1.default.stat(shellPath)).isDirectory()) {
            const stylesPath = path_1.default.join(shellPath, 'app/src/main/res/values/styles.xml');
            await fs_extra_1.default.ensureFile(stylesPath);
            return stylesPath;
        }
    }
    catch (error) {
        throw new Error(`Could not create android/app/src/main/res/values/styles.xml`);
    }
    return null;
}
exports.getProjectStylesXMLPathAsync = getProjectStylesXMLPathAsync;
async function readStylesXMLAsync(stylesPath) {
    const contents = await fs_extra_1.default.readFile(stylesPath, { encoding: 'utf8', flag: 'r' });
    const parser = new xml2js_1.Parser();
    const manifest = parser.parseStringPromise(contents);
    return manifest;
}
exports.readStylesXMLAsync = readStylesXMLAsync;
async function writeStylesXMLAsync(stylesPath, stylesContent) {
    const stylesXml = new xml2js_1.Builder().buildObject(stylesContent);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(stylesPath));
    await fs_extra_1.default.writeFile(stylesPath, stylesXml);
}
exports.writeStylesXMLAsync = writeStylesXMLAsync;
function setStylesItem(itemToAdd, styleFileContentsJSON) {
    const appTheme = styleFileContentsJSON.resources.style.filter((e) => e['$']['name'] === 'AppTheme')[0];
    if (appTheme.item) {
        const existingItem = appTheme.item.filter((item) => item['$'].name === itemToAdd[0].$.name)[0];
        // Don't want to 2 of the same item, so if one exists, we overwrite it
        if (existingItem) {
            existingItem['_'] = itemToAdd[0]['_'];
        }
        else {
            appTheme.item = appTheme.item.concat(itemToAdd);
        }
    }
    else {
        appTheme.item = itemToAdd;
    }
    return styleFileContentsJSON;
}
exports.setStylesItem = setStylesItem;
//# sourceMappingURL=Styles.js.map