"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const xml2js_1 = require("xml2js");
const BASE_STYLES_XML = `<?xml version="1.0" encoding="utf-8"?><resources></resources>`;
async function getProjectColorsXMLPathAsync(projectDir) {
    try {
        const shellPath = path_1.default.join(projectDir, 'android');
        if ((await fs_extra_1.default.stat(shellPath)).isDirectory()) {
            const colorsPath = path_1.default.join(shellPath, 'app/src/main/res/values/colors.xml');
            await fs_extra_1.default.ensureFile(colorsPath);
            return colorsPath;
        }
    }
    catch (error) {
        throw new Error('No android directory found in your project.');
    }
    return null;
}
exports.getProjectColorsXMLPathAsync = getProjectColorsXMLPathAsync;
async function readColorsXMLAsync(colorsPath) {
    const contents = await fs_extra_1.default.readFile(colorsPath, { encoding: 'utf8', flag: 'r' });
    const parser = new xml2js_1.Parser();
    const manifest = parser.parseStringPromise(contents || BASE_STYLES_XML);
    return manifest;
}
exports.readColorsXMLAsync = readColorsXMLAsync;
async function writeColorsXMLAsync(colorsPath, colorsContent) {
    const colorsXml = new xml2js_1.Builder().buildObject(colorsContent);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(colorsPath));
    await fs_extra_1.default.writeFile(colorsPath, colorsXml);
}
exports.writeColorsXMLAsync = writeColorsXMLAsync;
function setColorItem(itemToAdd, colorFileContentsJSON) {
    if (colorFileContentsJSON.resources.color) {
        const colorNameExists = colorFileContentsJSON.resources.color.filter((e) => e['$'].name === itemToAdd[0]['$'].name)[0];
        if (colorNameExists) {
            colorNameExists['_'] = itemToAdd[0]['_'];
        }
        else {
            colorFileContentsJSON.resources.color = colorFileContentsJSON.resources.color.concat(itemToAdd);
        }
    }
    else {
        if (typeof colorFileContentsJSON.resources === 'string') {
            //file was empty and JSON is `{resources : ''}`
            colorFileContentsJSON.resources = {};
        }
        colorFileContentsJSON.resources.color = itemToAdd;
    }
    return colorFileContentsJSON;
}
exports.setColorItem = setColorItem;
//# sourceMappingURL=Colors.js.map