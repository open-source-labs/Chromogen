{"version":3,"file":"Package.js","sourceRoot":"","sources":["../../src/android/Package.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ExpoConfig } from '../Config.types';\nimport { Document } from './Manifest';\n\nexport function getPackage(config: ExpoConfig) {\n  if (config.android && config.android.package) {\n    return config.android.package;\n  }\n\n  return null;\n}\n\nfunction getPackageRoot(projectRoot: string) {\n  return path.join(projectRoot, 'android', 'app', 'src', 'main', 'java');\n}\n\nfunction getCurrentPackageName(projectRoot: string) {\n  const packageRoot = getPackageRoot(projectRoot);\n  const mainApplicationPath = globSync('**/MainApplication.java', {\n    absolute: true,\n    cwd: packageRoot,\n  })[0];\n  const packagePath = path.dirname(mainApplicationPath);\n  const packagePathParts = packagePath.replace(packageRoot, '').split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport function renamePackageOnDisk(config: ExpoConfig, projectRoot: string) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageName(projectRoot);\n  if (currentPackageName === newPackageName) {\n    return;\n  }\n\n  // Set up our paths\n  const packageRoot = getPackageRoot(projectRoot);\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...newPackageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirpSync(newPackagePath);\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach(relativePath => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      fs.moveSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirpSync(filepath);\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } catch (_) {\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [\n    ...globSync('**/*', { cwd: newPackagePath, absolute: true }),\n    path.join(projectRoot, 'android', 'app', 'BUCK'),\n  ];\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName, 'g'), newPackageName);\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch (_) {}\n  });\n}\n\nexport function setPackageInBuildGradle(config: ExpoConfig, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`applicationId ['\"].*['\"]`);\n  return buildGradle.replace(pattern, `applicationId '${packageName}'`);\n}\n\nexport async function setPackageInAndroidManifest(config: ExpoConfig, manifestDocument: Document) {\n  const packageName = getPackage(config);\n\n  manifestDocument['manifest']['$']['package'] = packageName;\n\n  return manifestDocument;\n}\n"]}