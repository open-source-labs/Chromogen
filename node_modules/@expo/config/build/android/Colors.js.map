{"version":3,"file":"Colors.js","sourceRoot":"","sources":["../../src/android/Colors.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,gDAAwB;AACxB,mCAAyC;AAKzC,MAAM,eAAe,GAAG,+DAA+D,CAAC;AAEjF,KAAK,UAAU,4BAA4B,CAAC,UAAkB;IACnE,IAAI;QACF,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,kBAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;YAC5C,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC;YAC9E,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAChC,OAAO,UAAU,CAAC;SACnB;KACF;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAbD,oEAaC;AAEM,KAAK,UAAU,kBAAkB,CAAC,UAAkB;IACzD,MAAM,QAAQ,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IAChF,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;IAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,kBAAkB,CAAC,QAAQ,IAAI,eAAe,CAAC,CAAC;IACxE,OAAO,QAAQ,CAAC;AAClB,CAAC;AALD,gDAKC;AAEM,KAAK,UAAU,mBAAmB,CAAC,UAAkB,EAAE,aAAkB;IAC9E,MAAM,SAAS,GAAG,IAAI,gBAAO,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC3D,MAAM,kBAAE,CAAC,SAAS,CAAC,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7C,MAAM,kBAAE,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC;AAJD,kDAIC;AAED,SAAgB,YAAY,CAAC,SAAoB,EAAE,qBAA+B;IAChF,IAAI,qBAAqB,CAAC,SAAS,CAAC,KAAK,EAAE;QACzC,MAAM,eAAe,GAAG,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAClE,CAAC,CAAU,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CACvD,CAAC,CAAC,CAAC,CAAC;QACL,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC1C;aAAM;YACL,qBAAqB,CAAC,SAAS,CAAC,KAAK,GAAG,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAClF,SAAS,CACV,CAAC;SACH;KACF;SAAM;QACL,IAAI,OAAO,qBAAqB,CAAC,SAAS,KAAK,QAAQ,EAAE;YACvD,+CAA+C;YAC/C,qBAAqB,CAAC,SAAS,GAAG,EAAE,CAAC;SACtC;QACD,qBAAqB,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC;KACnD;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AApBD,oCAoBC","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { Builder, Parser } from 'xml2js';\n\nimport { Document } from './Manifest';\nimport { XMLItem } from './Styles';\n\nconst BASE_STYLES_XML = `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources></resources>`;\n\nexport async function getProjectColorsXMLPathAsync(projectDir: string): Promise<string | null> {\n  try {\n    const shellPath = path.join(projectDir, 'android');\n    if ((await fs.stat(shellPath)).isDirectory()) {\n      const colorsPath = path.join(shellPath, 'app/src/main/res/values/colors.xml');\n      await fs.ensureFile(colorsPath);\n      return colorsPath;\n    }\n  } catch (error) {\n    throw new Error('No android directory found in your project.');\n  }\n\n  return null;\n}\n\nexport async function readColorsXMLAsync(colorsPath: string): Promise<Document> {\n  const contents = await fs.readFile(colorsPath, { encoding: 'utf8', flag: 'r' });\n  const parser = new Parser();\n  const manifest = parser.parseStringPromise(contents || BASE_STYLES_XML);\n  return manifest;\n}\n\nexport async function writeColorsXMLAsync(colorsPath: string, colorsContent: any): Promise<void> {\n  const colorsXml = new Builder().buildObject(colorsContent);\n  await fs.ensureDir(path.dirname(colorsPath));\n  await fs.writeFile(colorsPath, colorsXml);\n}\n\nexport function setColorItem(itemToAdd: XMLItem[], colorFileContentsJSON: Document) {\n  if (colorFileContentsJSON.resources.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: XMLItem) => e['$'].name === itemToAdd[0]['$'].name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists['_'] = itemToAdd[0]['_'];\n    } else {\n      colorFileContentsJSON.resources.color = colorFileContentsJSON.resources.color.concat(\n        itemToAdd\n      );\n    }\n  } else {\n    if (typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = itemToAdd;\n  }\n  return colorFileContentsJSON;\n}\n"]}