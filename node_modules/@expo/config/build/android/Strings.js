"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const xml2js_1 = require("xml2js");
const BASE_STRINGS_XML = `<resources></resources>`;
async function getProjectStringsXMLPathAsync(projectDir) {
    try {
        const shellPath = path_1.default.join(projectDir, 'android');
        if ((await fs_extra_1.default.stat(shellPath)).isDirectory()) {
            const stringsPath = path_1.default.join(shellPath, 'app/src/main/res/values/strings.xml');
            await fs_extra_1.default.ensureFile(stringsPath);
            return stringsPath;
        }
    }
    catch (error) {
        throw new Error('No android directory found in your project.');
    }
    return null;
}
exports.getProjectStringsXMLPathAsync = getProjectStringsXMLPathAsync;
async function readStringsXMLAsync(stringsPath) {
    const contents = await fs_extra_1.default.readFile(stringsPath, { encoding: 'utf8', flag: 'r' });
    const parser = new xml2js_1.Parser();
    const manifest = parser.parseStringPromise(contents || BASE_STRINGS_XML);
    return manifest;
}
exports.readStringsXMLAsync = readStringsXMLAsync;
async function writeStringsXMLAsync(stringsPath, stringsContent) {
    const stringsXml = new xml2js_1.Builder().buildObject(stringsContent);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(stringsPath));
    await fs_extra_1.default.writeFile(stringsPath, stringsXml);
}
exports.writeStringsXMLAsync = writeStringsXMLAsync;
function setStringItem(itemToAdd, stringFileContentsJSON) {
    if (stringFileContentsJSON.resources.string) {
        const stringNameExists = stringFileContentsJSON.resources.string.filter((e) => e['$'].name === itemToAdd[0]['$'].name)[0];
        if (stringNameExists) {
            // replace the previous value
            stringNameExists['_'] = itemToAdd[0]['_'];
        }
        else {
            stringFileContentsJSON.resources.string = stringFileContentsJSON.resources.string.concat(itemToAdd);
        }
    }
    else {
        if (typeof stringFileContentsJSON.resources === 'string') {
            // file was empty and JSON is `{resources : ''}`
            stringFileContentsJSON.resources = {};
        }
        stringFileContentsJSON.resources.string = itemToAdd;
    }
    return stringFileContentsJSON;
}
exports.setStringItem = setStringItem;
//# sourceMappingURL=Strings.js.map