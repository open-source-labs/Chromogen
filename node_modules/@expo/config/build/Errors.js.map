{"version":3,"file":"Errors.js","sourceRoot":"","sources":["../src/Errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;;GAEG;AACH,MAAa,WAAY,SAAQ,KAAK;IACpC,YAAY,OAAe,EAAS,IAAqB,EAAS,KAAa;QAC7E,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,eAAe,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAD/C,SAAI,GAAJ,IAAI,CAAiB;QAAS,UAAK,GAAL,KAAK,CAAQ;QAE7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACpC,CAAC;CACF;AALD,kCAKC;AAED,SAAgB,aAAa,CAAC,EAAsB;QAAtB,EAAE,IAAI,OAAgB,EAAd,2BAAO;IAC3C,IAAI,KAAU,CAAC;IACf,IAAI,IAAI,KAAK,WAAW,EAAE;QACxB,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACrC;SAAM;QACL,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACjC;IACD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACnC,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SACxB;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAbD,sCAaC;AAED,SAAgB,WAAW,CAAC,KAAU;IACpC,uCACK,KAAK,KACR,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,IAClB;AACJ,CAAC;AARD,kCAQC","sourcesContent":["import { ConfigErrorCode } from './Config.types';\n\n/**\n * Based on `JsonFileError` from `@expo/json-file`\n */\nexport class ConfigError extends Error {\n  constructor(message: string, public code: ConfigErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.name}: ${cause.message}` : message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport function errorFromJSON({ name, ...json }: any): Error {\n  let error: any;\n  if (name === 'TypeError') {\n    error = new TypeError(json.message);\n  } else {\n    error = new Error(json.message);\n  }\n  for (const key of Object.keys(json)) {\n    if (key in json) {\n      error[key] = json[key];\n    }\n  }\n  return error;\n}\n\nexport function errorToJSON(error: any): any {\n  return {\n    ...error,\n    message: error.message,\n    code: error.code,\n    name: error.name,\n    stack: error.stack,\n  };\n}\n"]}